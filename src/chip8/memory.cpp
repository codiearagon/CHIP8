#include <iostream>
#include "memory.h"

Memory::Memory() {
    memory.fill(0);
    initFont();
}

Memory::~Memory() {}

uint8_t Memory::read(uint16_t addr) const {
    if (addr <= 0xFFF) {
        return memory[addr];
    } else
        std::cout << "Attempted to read out of bounds at address: " << std::hex << addr << std::endl;

    return -1; // Return -1 for out-of-bounds access
}

void Memory::write(uint16_t addr, uint8_t value) {
    if (addr <= 0xFFF) { // CHIP8 maximum address is 12 bits
        memory[addr] = value;
    } else
        std::cout << "Attempted to write out of bounds at address: " << std::hex << addr << std::endl;
}

void Memory::initFont() {
    std::array<uint8_t, 80> fontArray = {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    for(uint16_t i = 0; i <= 80; i++) {
        write(0x50 + i, fontArray[i]);
    }
}